WEBVTT

1
00:00:03.449 --> 00:00:20.010
Ron Sha: Okay, so in this session, I cannot talk about make file and some of you have mentioned to me that you'll never use the make file or you'll ever separated. Your c++ or your source code into model.

2
00:00:21.150 --> 00:00:39.570
Ron Sha: cpp file. So we're going to do is to show you how to use a make file. And one of the reason is we need to separate our source code into multiple files that contains all different functions versus us just one single big cpp file.

3
00:00:40.200 --> 00:00:47.610
Ron Sha: So on. So I'm showing you this. So using the bottle image or less. I have a provided and

4
00:00:48.060 --> 00:00:59.820
Ron Sha: So inside here I have a sample make file so called lab one meg file. So one of the things is a for all your lab. You shouldn't create a folder and that contains all your lap.

5
00:01:00.120 --> 00:01:15.480
Ron Sha: Me for each individual lab, you should have a folder. So for example, this module called that one. Or I can just, you know, change this to that too. And then here is where that is. Right. So inside of here, I have a provider some sample.

6
00:01:16.350 --> 00:01:30.360
Ron Sha: Programs that demonstrate that using multiple cpp file which is a C plus plus file and how to use in that and then produce executable call factorial main and

7
00:01:30.840 --> 00:01:44.100
Ron Sha: A here is the make file. So the make file is always start with m make file and the make file has a certain kind of format and a standard. So that's opened up right so the make file here right and

8
00:01:45.180 --> 00:02:02.700
Ron Sha: Is on CC night. It's a variable. So all the ARPA case is the variable. Now you can net on just substituting and so CC equal to g plus plus. I mean, so we using c++ compiler, which is a c++ compiler for

9
00:02:03.720 --> 00:02:17.040
Ron Sha: For this particular GPU version of the compilers and then see flak, you know, it means is if I do a compile, I want to use a see flat dash c means compile and that is a

10
00:02:17.340 --> 00:02:27.030
Ron Sha: Term cpp file into an object file which is our file desktop, or do you walk there was means just print out all the messages you have

11
00:02:27.660 --> 00:02:39.930
Ron Sha: Our flag is useful thinking and when you produce an executable file, you have to make sure all the libraries you have. So if you don't have any special

12
00:02:40.710 --> 00:02:50.310
Ron Sha: Additional program that you you used, you don't have usually you don't have the added this. So here I have an example, my sequel my SQL and

13
00:02:51.180 --> 00:03:02.640
Ron Sha: So if you're using my SQL and here is all the libraries which is object code is add and that you can use. So in our example, since I don't have any I just leave that blank.

14
00:03:03.540 --> 00:03:14.700
Ron Sha: So let's see how the make file is works. So make fire always have this one all colon. So anything on the left hand side of the corner is the

15
00:03:15.150 --> 00:03:24.750
Ron Sha: Other command that you defined and everything after the colon on the right hand side is the dependency, you have

16
00:03:25.170 --> 00:03:34.410
Ron Sha: So let's take a look at all. Colon factor. I mean, is it all. Okay, what is the factorial mean are they come down here find it factorial mean

17
00:03:34.800 --> 00:03:45.750
Ron Sha: And effect or mean dependent on everything on the right hand side is colon. So let me as a dependent on factorial underscore mean that all factorial underscore French

18
00:03:46.050 --> 00:03:56.610
Ron Sha: Function dot all so our own is option file, they're being compiled from cpp file. So you say, okay, so this one that all what is it all. You find it.

19
00:03:56.940 --> 00:04:16.770
Ron Sha: All that want it's dependent on factorial underscore main dot cpp so what it does is he called the we evaluated all those command. So everything on the left, right hand side of the corner is what we call dependencies everything on the left hand side, it's the way you try to compare

20
00:04:18.090 --> 00:04:25.830
Ron Sha: So in this case, is they say, okay, factorial CPP as factorial underscore main dot cpp it's

21
00:04:26.880 --> 00:04:39.210
Ron Sha: You know, is used to see the doll file. So, if at all, file has a later timestamp then CPP that me is, well, this object file is more recent

22
00:04:39.600 --> 00:04:52.440
Ron Sha: But if I made a change to the source code and this one has a more recent timestamp. Let me is the object code is obsolete. I have three compiling it so re compile you're doing this, where

23
00:04:53.190 --> 00:05:03.060
Ron Sha: Daughters ICC. What's the CC. It was he's he's here he defined it. And that is a c++ compiler. In this case, we're using the culture c++

24
00:05:03.570 --> 00:05:13.260
Ron Sha: And the here is the flag see flag okay dash c means compile and then here is your cpp file that same thing, you know.

25
00:05:13.830 --> 00:05:25.080
Ron Sha: econ a check on this one as well. So you would check on everything on the right hand side, this case is not only going to check you know the functions. You're also going to check

26
00:05:25.860 --> 00:05:31.080
Ron Sha: The factorial our header files. So this one actually you could just also, you know,

27
00:05:31.530 --> 00:05:43.110
Ron Sha: See, you know, this file also dependent on it. Right. And so this simply just to check the timestamp. That's all you guys. And once you finishing it once it all. This is a be satisfied. Right.

28
00:05:43.590 --> 00:05:54.150
Ron Sha: From here you will come back to this statement here which is doing the actual thinking and of the program and dash all means.

29
00:05:55.110 --> 00:06:07.140
Ron Sha: APO, the executable program in this name. Okay. And you also can do you find other come in and as part of the make file so you can define anything you want. And so this is the make file.

30
00:06:07.530 --> 00:06:17.760
Ron Sha: Okay, so let's take a look at the you know the program itself. So we'll have a factorial underscore function dot cpp. So this is just a function. Okay, so in your program, we have a function

31
00:06:18.120 --> 00:06:30.240
Ron Sha: You must have all those documentation and to show the purpose of this function in this case factorial. The purpose this feature will take the number input and return the factorial of the number input.

32
00:06:30.630 --> 00:06:38.850
Ron Sha: And then you have a parameters and then you have to identify what the parameter is so add the parameter and say, Okay, that's number of

33
00:06:39.300 --> 00:06:49.440
Ron Sha: Is used to calculate the factorial. So this way you know what the parameter is one is for and return. I'll return the factorial right and

34
00:06:49.920 --> 00:07:03.450
Ron Sha: Then I also has a factorial Deitch file. So you could, you know, you can include whatever diet file you have that is needed for this program. So when you have died file when you're using a double code and

35
00:07:03.840 --> 00:07:20.910
Ron Sha: Off of the file name. Why does is it look for the file in the current directory of where you know the this CPP files that when using this right and he was search for the library as assistant ivory and where you define the system.

36
00:07:21.390 --> 00:07:33.060
Ron Sha: Library path. Okay. And so here is your main program. So, improve right here. This is a okay and very simple straightforward our core factorial

37
00:07:33.360 --> 00:07:44.310
Ron Sha: So all factorial is not inside this mean program, it is not so we separated into this functions. Right. But since I need to using it.

38
00:07:44.700 --> 00:07:56.940
Ron Sha: And so we have to make sure we're defining it. That is where the factor that each file comes in. So factor or die each file is what we call forward declaration, you just declare the function

39
00:07:57.240 --> 00:08:04.830
Ron Sha: And it doesn't, you know, include all the source code, you say, okay, don't worry about it, you know, just, you know, just assume there's a factorial function.

40
00:08:05.460 --> 00:08:12.090
Ron Sha: Exists and during linking time, I will give the the source. I mean, the object of file to eat right

41
00:08:12.480 --> 00:08:19.560
Ron Sha: And so in in all your program. Okay. Well, you have a Dodge file, you should always use this

42
00:08:19.920 --> 00:08:41.340
Ron Sha: And Python if undefined and then factorial underscore edge. So this one is usually the file name and then you put an underscore edge. So this way you know when you define the factorial that edge here. For example, if I included twice right and

43
00:08:42.870 --> 00:08:51.420
Ron Sha: So you shouldn't matter if you include the twice or included in multiple times. The reason is, is I hear

44
00:08:51.930 --> 00:09:01.140
Ron Sha: Once you include a one time when you running the program you will remember it. And so that's time when you include again. He was somebody just ignore it.

45
00:09:02.100 --> 00:09:08.610
Ron Sha: Okay, so now we have all this, right. So let's add this guy, since we don't need it right and

46
00:09:09.150 --> 00:09:29.130
Ron Sha: So to compile right so this one is a full compile that's and this one for thinking. So this was a compiled this current cpp file. And this one is an inking everything. So that's the hardest sense of works, right. So if you that's do the function one. So I said, Okay, let's compiling it

47
00:09:30.270 --> 00:09:36.840
Ron Sha: Okay, so you compile it, so it is ok that's a, that's a nice lesson, thinking it what you will not work right.

48
00:09:37.170 --> 00:09:44.880
Ron Sha: And because there is no main program define a, you know, say what is the name for a while. I don't have any right and

49
00:09:45.270 --> 00:10:06.030
Ron Sha: So that is it just a function that's all it is. Well, okay, let's take a look at this guy. Okay, so if I want to compile it. Okay. And yeah, it works but can I run it. No, I cannot run this and, you know, and so I really compiled it before. So let me do this right and

50
00:10:08.310 --> 00:10:10.770
Ron Sha: So let me get rid of everything right.

51
00:10:15.300 --> 00:10:24.330
Ron Sha: So now let's go to hear that mean fine. Sure. Right. And so if I, you know, just want to build a current program. Okay, that's appealed it

52
00:10:25.380 --> 00:10:39.990
Ron Sha: Okay. Is it. Oh, can we build it, but there's arrow, where the arrows say undefined reference will fight for factorial, which is right here. But he said, Why why means undefined. I read included in the factorial here.

53
00:10:41.250 --> 00:10:57.750
Ron Sha: Yeah you did. However, and I don't know what call the source code works. There's no object file or, you know, the program there you see here, we are compiling it, it only included, you know,

54
00:10:58.680 --> 00:11:15.480
Ron Sha: Factor. I mean, it did not include this right so of course it doesn't work. So then, since we already have the make file right and the defined all the dependencies, you can just simply go here. There's a little arrow key here to say make all okay

55
00:11:17.040 --> 00:11:23.610
Ron Sha: So as you can see, once they make all is it all okay are going to make all compiling

56
00:11:24.720 --> 00:11:40.680
Ron Sha: The, the factorial main and and the fashion. So now if you know if I do make all again. Let's do this again. Right. Let's do a make all sensor. You didn't make all and the next time you can just do a build. Okay.

57
00:11:41.370 --> 00:11:55.350
Ron Sha: And it's on me a call. Okay, and now is, you know, is a compiler successfully right now. You can run it. Okay. And so now there are another way of doing this.

58
00:11:56.250 --> 00:12:06.480
Ron Sha: So let's go to open a terminal. Okay, so you can just go to the folder and then open a terminal, you will automatically just go to that the the directory

59
00:12:07.020 --> 00:12:16.500
Ron Sha: And so if you look at the timestamp right here and the factorial function CPP is a last modified at 1014

60
00:12:16.860 --> 00:12:31.920
Ron Sha: And object fires a 1030 so though Tao fi auction file is a more recent than cpp file right and so if you can also make a to the make file or side to make in this case you will not do anything.

61
00:12:32.460 --> 00:12:39.960
Ron Sha: The reason for that is all the object file is more recent and cpp file. So nothing has changed, right.

62
00:12:40.920 --> 00:12:56.670
Ron Sha: And so if you make a change in our to the file itself. Right. So, for example, right. So I made I made changes to it. Right. So just, you know, just made some change and

63
00:12:57.210 --> 00:13:03.600
Ron Sha: And then I saved it. And so now let's take a look at the timestamp on this right

64
00:13:04.200 --> 00:13:24.900
Ron Sha: And so the timestamp on this. I just changed the factor of me. So now for me has a 1039 option 510 38 so let me is this source code cpp file, it's more recent than the doll or five right so if I do, I do, and make right here. You will only

65
00:13:26.340 --> 00:13:27.420
Ron Sha: You're only

66
00:13:28.620 --> 00:13:37.350
Ron Sha: Compile okay so you were only compile this one. Okay. And the reason for that is, and

67
00:13:39.510 --> 00:13:50.340
Ron Sha: You know the cpp file more reason he will not do anything with a function because this one has a later timestamp okay and Tao file. So let's see. Let's see whether

68
00:13:51.690 --> 00:14:04.380
Ron Sha: It's correct or not see. Yeah. Indeed, he only compiled and mean and now he went, thinking it and the words are the optical file. So if you do I make again nothing gonna happen right and

69
00:14:04.830 --> 00:14:23.970
Ron Sha: So the purpose of the omega is no need to re compile the program. If you know your object file is more recent the cpp file. That means you have not changed this article the wire compositing right. And so if we make make some more changes on this one right and

70
00:14:25.530 --> 00:14:38.610
Ron Sha: And then you're saving it. And if you look at that a timestamp here a should have a more later timestamp and sure enough he has more later timestamp. So if I do I make again.

71
00:14:39.840 --> 00:14:50.370
Ron Sha: I and as you can see, is he only compiled on that the cpp file that you changed. So this is just another way of

72
00:14:51.030 --> 00:15:04.800
Ron Sha: combining multiple source code. So the reason for doing that is in a real world. You don't just write one huge single c++ programs in a single cpp file.

73
00:15:05.340 --> 00:15:10.980
Ron Sha: You break them up to a model functions. And the reason is in corporate in the real world.

74
00:15:11.220 --> 00:15:22.680
Ron Sha: And when you're working on the project. There are many people working on the project. So some people responsible writing this function. Some people responsible for running, running, another function and and then

75
00:15:23.490 --> 00:15:29.880
Ron Sha: Then once they're finishing it and then you try to do a built we call the build and the build is simply me it's

76
00:15:30.780 --> 00:15:39.300
Ron Sha: A pull all the source code and then try to compile it and to making executable programs and when you try to come piloting it and

77
00:15:39.690 --> 00:15:49.200
Ron Sha: If the source code has not changed the function of the source code has not changed. No need to re compile again because the compiler tickets kind to resources and

78
00:15:50.130 --> 00:16:02.700
Ron Sha: You know, if you have an I have have a function or cpp file is a million lines of code where you go try to compile, they're going to take a long time take upon a while, right. So, and also this way is

79
00:16:03.090 --> 00:16:11.850
Ron Sha: When you're separated and you can just give the object file and to somebody else to use instead of a cpp file because in one

80
00:16:12.900 --> 00:16:17.190
Ron Sha: Shot people how you did your program and a company that is selling

81
00:16:18.000 --> 00:16:25.800
Ron Sha: Applications on TV and library. They don't kind of give you the source code, they gave you the libraries or object files together with the

82
00:16:26.130 --> 00:16:43.410
Ron Sha: You know, the age file that it's the reason dies file documentation is also very important. So this way I know how to using the program. Okay, so hopefully, what's this you will have a better understanding how to use the make file. So to summarize, the key things is

83
00:16:44.940 --> 00:16:50.010
Ron Sha: It's just make sure you have created a folder with all the

84
00:16:51.360 --> 00:17:02.400
Ron Sha: The, the programs for this lab together. And in addition, right, and have the make file changed and make file to reflective of all the, you know,

85
00:17:03.360 --> 00:17:15.090
Ron Sha: your source code and the dependencies and it on top of it. The make file on another cases will remember. And so here is the tap. Okay.

86
00:17:15.420 --> 00:17:31.110
Ron Sha: And no spaces. So for example, if you if I did a space, right. So you have to do a tap right if I did a space. Okay, I see what happens and you weren't getting arrow when you're running it. Okay, so this is sometimes

87
00:17:32.370 --> 00:17:46.530
Ron Sha: Something that where people don't realize a missing separator is well the missing separate arrows means there's a formatting issue a your make file and typically is caused by this. So now let's change this.

88
00:17:47.580 --> 00:17:58.860
Ron Sha: To a tab. OK. And now let's save it. And so now when you're doing again, everything would be okay right so not everything's okay

89
00:17:59.610 --> 00:18:06.510
Ron Sha: Make me make a clean, simple, these are the remove all the object file and the program. So you want to do a

90
00:18:07.500 --> 00:18:15.960
Ron Sha: Brand new and make which we are compile everything again and now you know you have everything. Okay. So that is a quick

91
00:18:16.590 --> 00:18:36.060
Ron Sha: Review of make file. And so you can do the make file in the comment die or to the make file inside ID and using this and make all here. And to do this. Now, if you're using other IDs are they also have the same

92
00:18:36.600 --> 00:18:50.970
Ron Sha: features and functionalities. You just have to search for the documentation harder. Other id, id implement make files or holiday handle multiple source code into one executable code.

